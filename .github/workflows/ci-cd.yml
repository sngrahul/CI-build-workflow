name: ci-cd 

run-name: BuildDotnet-by-${{ github.actor}}

on: 
    workflow_dispatch:
        inputs:
            environments:
                description: To deploy for env
                type: environment
                required: true
            deploy:
                description: deploy 
                type: boolean

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: code checkout
              uses: actions/checkout@v4

            - name: setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                 dotnet-version: '6.0.x'

            - name: setupJava
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '17'

            - name: download dotnet sonarscanner
              run: |
                dotnet tool install --global dotnet-sonarscanner

            - name: Restore dependencies
              run: |
                dotnet restore

            - name: Sonarbegin
              run: |
               dotnet sonarscanner begin /k:"DotnetPocDemo" /d:sonar.host.url="${{ vars.SONARHOST }}"  /d:sonar.token="${{ secrets.SONARTOKEN }}"

            - name: Dotnet Build
              run: |
                dotnet build

            - name: sonarend
              run: |
               dotnet sonarscanner end /d:sonar.token="${{ secrets.SONARTOKEN }}"

            - name: Dotnet Publish
              run: |
                dotnet publish -o ${{ vars.ARTIFACTPATH }}

            - name: upload artifacts
              uses: actions/upload-artifact@v4
              with:
                name: Build-Artifacts
                path: ${{ github.workspace  }}/${{ vars.ARTIFACTPATH }}
                retention-days: 5

            - name: Summary
              run: |
                echo "Workflowid: $GITHUB_RUN_ID" > $GITHUB_STEP_SUMMARY

    deploy:
        needs: build
        runs-on: deploy
        if: ${{ inputs.deploy  }}
        environment: ${{ inputs.environments }}
        steps:

            - name: echo BackupPath
              run: |
                cd ${{ vars.BACKUP_PATH }}
                ls -la

            - name: Backup artifacts
              run: |
                Copy-Item -Path ${{ vars.DEPLOYMENTPATH  }}/* -Destination ${{ vars.BACKUP_PATH }} -Force

            - name: echo BackupPath
              run: |
                cd ${{ vars.BACKUP_PATH }}
                dir

            - name: download artifacts
              uses: actions/download-artifact@v4
              with:
                name: Build-Artifacts
                path: ${{ vars.DEPLOYMENTPATH }}
            
            - name: Restart IIS
              run: |
                echo "restart IIS"

            - name: check status
              run: |
                echo "IIS Status"

    rollback:
        needs: deploy
        runs-on: deploy
        environment: ${{ inputs.environments }}
        if: failure() && needs.deploy.result == 'failure'
        steps:
            - name: Copy Old Artifacts
              run: |
                Copy-Item -Path ${{ vars.BACKUP_PATH }}/* -Destination ${{ vars.DEPLOYMENTPATH }} -Force

            - name: Restart IIS
              run: |
                echo "restart IIS"

            - name: check status
              run: |
                echo "IIS Status"
            

    

                


